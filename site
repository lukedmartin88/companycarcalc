<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UK Company Car & Salary Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #ffffff;
        }
        .hero-bg {
            background: url('https://images.unsplash.com/photo-1553440569-b2dc59b2ae92?q=80&w=2070&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaGötby1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
            background-size: cover;
            background-position: center;
        }
        .input-group {
            position: relative;
        }
        .input-group svg {
            position: absolute;
            left: 1rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
            pointer-events: none;
        }
        .input-group input {
            padding-left: 3rem;
            border: 1px solid #e5e7eb;
            transition: all 0.2s ease-in-out;
        }
        .input-group input:focus {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
            border-color: #3b82f6;
        }
        .loader {
            border-top-color: #2563eb;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        /* Custom styles for parsed markdown */
        #results h2 {
            font-size: 1.25rem;
            font-weight: 700;
            color: #111827;
            margin-bottom: 1rem;
            padding-bottom: 0.5rem;
            border-bottom: 1px solid #e5e7eb;
        }
        #results table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }
        #results th, #results td {
            padding: 0.75rem 1rem;
            text-align: left;
            border-bottom: 1px solid #f3f4f6;
        }
        #results th {
            font-weight: 500;
            color: #6b7280;
        }
        #results td {
            font-weight: 600;
            color: #1f2937;
        }
        #results .comparison-table th, #results .comparison-table td {
             font-size: 1.125rem;
             padding: 1rem;
        }
        #results .comparison-table td:nth-child(2) {
            color: #16a34a;
            font-weight: 700;
        }
        #results .comparison-table td:nth-child(3) {
            color: #374151;
            font-weight: 700;
        }
        #results .comparison-table .cost-cell {
             color: #dc2626 !important;
        }
        #results ul {
            list-style: none;
            padding: 0;
            margin-top: 1rem;
        }
        #results li {
            padding: 0.75rem 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        #results li span:first-child {
            color: #6b7280;
        }
        #results li span:last-child {
            font-weight: 600;
            color: #1f2937;
        }
         #results .disclaimer {
            font-size: 0.875rem;
            color: #6b7280;
            margin-top: 2rem;
            padding-top: 1rem;
            border-top: 1px solid #e5e7eb;
         }
    </style>
</head>
<body class="text-gray-800">
    <div class="w-full">
        <!-- Hero Section -->
        <div class="hero-bg">
            <div class="bg-black bg-opacity-50 py-20 px-4 text-center text-white">
                <h1 class="text-4xl md:text-6xl font-extrabold tracking-tight">Company Car Tax, Simplified.</h1>
                <p class="mt-4 text-lg md:text-xl max-w-2xl mx-auto text-gray-200">Enter your salary and a car to see your real take-home pay.</p>
            </div>
        </div>

        <!-- Calculator Section -->
        <div class="max-w-6xl mx-auto -mt-16 p-4">
            <div class="bg-white rounded-2xl shadow-2xl">
                <div class="p-6 md:p-8">
                    <div class="grid grid-cols-1 lg:grid-cols-4 gap-4 items-end">
                        <div class="input-group lg:col-span-1">
                            <label for="salary" class="block text-sm font-medium text-gray-700 mb-1">Salary (£)</label>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 7c0-5.333-8-5.333-8 0v10c0 5.333 8 5.333 8 0M1 12h14"></path></svg>
                            <input type="number" id="salary" class="w-full px-4 py-3 rounded-lg" placeholder="e.g., 35000">
                        </div>
                        <div class="input-group lg:col-span-1">
                            <label for="taxCode" class="block text-sm font-medium text-gray-700 mb-1">Tax Code</label>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16v16H4z"></path><path d="M4 9h16"></path><path d="M10 13v2"></path><path d="M14 13v2"></path></svg>
                            <input type="text" id="taxCode" class="w-full px-4 py-3 rounded-lg" placeholder="e.g., 1257L">
                        </div>
                        <div class="input-group lg:col-span-1">
                            <label for="carModel" class="block text-sm font-medium text-gray-700 mb-1">Car Make & Model</label>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9L2 12v9c0 .6.4 1 1 1h2"></path><circle cx="7" cy="17" r="2"></circle><circle cx="17" cy="17" r="2"></circle></svg>
                            <input type="text" id="carModel" class="w-full px-4 py-3 rounded-lg" placeholder="e.g., Tesla Model 3">
                        </div>
                        <div class="lg:col-span-1">
                            <button id="calculateBtn" class="w-full bg-blue-600 text-white font-bold py-3 px-6 rounded-lg shadow-md hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 transition transform hover:scale-105">
                                Calculate
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Results Area -->
        <div class="max-w-6xl mx-auto p-4">
            <div id="loading" class="hidden p-8 text-center">
                <div class="flex justify-center items-center">
                    <div class="loader ease-linear rounded-full border-4 border-t-4 border-gray-200 h-12 w-12"></div>
                    <p class="ml-4 text-gray-600 text-lg">Calculating your results...</p>
                </div>
            </div>
            
            <div id="error" class="hidden p-8 text-center">
                 <div class="bg-red-50 border-l-4 border-red-400 p-4 rounded-md">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                            </svg>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-red-700" id="errorMessage">Could not fetch results. Please check your inputs and try again.</p>
                        </div>
                    </div>
                </div>
            </div>

            <div id="results" class="space-y-8">
                <!-- Results will be injected here -->
            </div>
        </div>
        
        <footer class="text-center text-sm text-gray-500 my-8">
            <p>Created for @lukedmartin88</p>
            <p>Powered by Gemini. All calculations are estimates for informational purposes only.</p>
        </footer>
    </div>

    <script>
        const calculateBtn = document.getElementById('calculateBtn');
        const salaryInput = document.getElementById('salary');
        const taxCodeInput = document.getElementById('taxCode');
        const carModelInput = document.getElementById('carModel');
        const resultsDiv = document.getElementById('results');
        const loadingDiv = document.getElementById('loading');
        const errorDiv = document.getElementById('error');
        const errorMessageSpan = document.getElementById('errorMessage');

        calculateBtn.addEventListener('click', getTaxCalculation);

        async function getTaxCalculation() {
            const salary = salaryInput.value;
            const taxCode = taxCodeInput.value;
            const carModel = carModelInput.value;

            if (!salary || !taxCode || !carModel) {
                showError("Please fill in all fields to get a calculation.");
                return;
            }

            showLoading();

            const prompt = `
                You are a UK tax expert providing calculations for a web app. A user has a gross annual salary of £${salary}, a tax code of ${taxCode}, and is considering a "${carModel}" as a company car. 
                
                Provide a detailed breakdown of their take-home pay based on the 2025/2026 UK tax year for England.

                Your entire response MUST be formatted in Markdown. Do not include any introductory or concluding sentences outside of the Markdown structure. Use "£" for currency and format numbers with commas where appropriate.

                Start with a level 2 heading "Salary Breakdown (Without Car)".
                Then, create a Markdown table showing the take-home pay calculation for the £${salary} salary *without* any company car. The table should have two columns: "Description" and "Amount". Include rows for: Gross Annual Salary, Tax-Free Personal Allowance, Taxable Income, Income Tax @ 20%, National Insurance, and then a final row for **Estimated Annual Take-Home**.

                Next, add a level 2 heading "Company Car Tax Calculation".
                Under this, create a Markdown list with the following details for the "${carModel}":
                - **Car Model:** ${carModel}
                - **Estimated P11D Value:** (Provide your best estimate, e.g., £45,000)
                - **CO2 Emissions:** (Provide g/km, state 0g/km for EVs)
                - **Benefit-in-Kind (BiK) Rate (2025/26):** (Provide the correct percentage, e.g., 3%)
                - **Taxable Benefit (P11D x BiK Rate):** (Show the calculation, e.g., £45,000 x 3% = £1,350)
                - **Annual Company Car Tax (Taxable Benefit x 20%):** (Show the calculation, e.g., £1,350 x 20% = £270)

                Then, add a level 2 heading "Final Take-Home Pay Comparison".
                Create a Markdown table comparing the take-home pay. It should have three columns: "Description", "Without Car", and "With Car". Use bold for the final row labels. Include rows for: Estimated Annual Take-Home, **Estimated Monthly Take-Home**, and **Monthly Cost of Car**. The "Monthly Cost of Car" row should show "£0.00" in the 'Without Car' column and the calculated monthly tax in the 'With Car' column, and this cell should have a class 'cost-cell'. Add the class "comparison-table" to the table.

                Finally, add a horizontal rule and a disclaimer in italics: "*Disclaimer: These figures are estimates for the 2025/2026 tax year in England and are for illustrative purposes only. The car's final P11D value may vary. This calculation does not account for pensions, student loans, or other deductions. Please consult with a financial advisor for precise figures.*"
            `;

            try {
                const resultText = await callGeminiApi(prompt);
                // Wrap each section in a card for styling
                const sections = resultText.split('## ').filter(s => s.trim() !== '');
                let htmlContent = '';
                sections.forEach(section => {
                    let content = '## ' + section;
                    // Add class to comparison table
                    content = content.replace('<table>', '<table class="comparison-table">');
                    content = content.replace('<td>-£', '<td class="cost-cell">-£');
                    htmlContent += `<div class="bg-white rounded-xl shadow-lg p-6 md:p-8">${marked.parse(content)}</div>`;
                });

                resultsDiv.innerHTML = htmlContent;
                showResults();
            } catch (error) {
                console.error("Error calling Gemini API:", error);
                showError("Failed to get a response from the calculation engine. Please try again later.");
            }
        }

        async function callGeminiApi(prompt) {
            const apiKey = ""; // Leave empty, handled by the environment
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
            const payload = { contents: [{ parts: [{ text: prompt }] }] };
            
            for (let i = 0; i < 5; i++) {
                try {
                    const response = await fetch(apiUrl, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });

                    if (response.ok) {
                        const data = await response.json();
                        if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
                            return data.candidates[0].content.parts[0].text;
                        } else {
                            console.error("Unexpected API response structure:", data);
                            if (data.promptFeedback?.blockReason) {
                                throw new Error(`API request blocked: ${data.promptFeedback.blockReason}. Please adjust your car model input.`);
                            }
                            throw new Error("The API returned an empty or invalid response.");
                        }
                    }
                    
                    if (response.status === 429 || response.status >= 500) {
                       await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                       continue;
                    } else {
                       throw new Error(`API request failed with status ${response.status}`);
                    }
                } catch (error) {
                    if (i === 4) throw error;
                    await new Promise(resolve => setTimeout(resolve, Math.pow(2, i) * 1000));
                }
            }
            throw new Error("API request failed after multiple retries.");
        }

        function showLoading() {
            resultsDiv.style.display = 'none';
            errorDiv.style.display = 'none';
            loadingDiv.style.display = 'block';
        }

        function showResults() {
            loadingDiv.style.display = 'none';
            errorDiv.style.display = 'none';
            resultsDiv.style.display = 'block';
        }
        
        function showError(message) {
            loadingDiv.style.display = 'none';
            resultsDiv.style.display = 'none';
            errorMessageSpan.textContent = message;
            errorDiv.style.display = 'block';
        }
    </script>
</body>
</html>
